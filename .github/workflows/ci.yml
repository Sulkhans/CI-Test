# .github/workflows/ci.yml
name: Multi-Branch CI/CD Pipeline

# When should this workflow run?
on:
  push:
    branches: [main, staging, development]

# Define the jobs
jobs:
  # Basic tests that run on ALL branches
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: basic-tests
    # Only run on development and staging branches
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t my-app:${{ github.sha }} .
          echo "Docker image built successfully!"

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d -p 3000:3000 --name test-container my-app:${{ github.sha }}

          # Wait for container to start
          sleep 10

          # Test if it responds
          curl -f http://localhost:3000/health || exit 1

          # Clean up
          docker stop test-container
          docker rm test-container

  promote-to-staging:
    name: Promote to Staging
    runs-on: ubuntu-latest
    needs: [basic-tests, docker-build]
    # Only run when pushing to development branch AND all tests pass
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history so we can push to other branches
          fetch-depth: 0
          # Use a token that has permission to push to protected branches
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Promote to staging branch
        run: |
          # Switch to staging branch
          git checkout staging
          # Merge the development branch
          git merge origin/development --no-ff -m "Auto-merge development to staging after successful tests"
          # Push to staging
          git push origin staging

      - name: Notify promotion success
        run: |
          echo "âœ… Successfully promoted development to staging branch!"
          echo "Commit SHA: ${{ github.sha }}"
          echo "All tests passed and code is now available in staging"
