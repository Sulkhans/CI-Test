# .github/workflows/ci.yml
name: Multi-Branch CI/CD Pipeline

# When should this workflow run?
on:
  push:
    branches: [main, staging, development]

# Define the jobs
jobs:
  # Basic tests that run on ALL branches
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: basic-tests
    # Only run on development and staging branches
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t my-app:${{ github.sha }} .
          echo "Docker image built successfully!"

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d -p 3000:3000 --name test-container my-app:${{ github.sha }}

          # Wait for container to start
          sleep 10

          # Test if it responds
          curl -f http://localhost:3000/health || exit 1

          # Clean up
          docker stop test-container
          docker rm test-container

  promote-to-staging:
    name: Promote to Staging
    runs-on: ubuntu-latest
    needs: [basic-tests, docker-build]
    # Only run when pushing to development branch AND all tests pass
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history so we can push to other branches
          fetch-depth: 0
          # Use a token that has permission to push to protected branches
          token: ${{ secrets.PAT_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Promote to staging branch
        run: |
          # Switch to staging branch
          git checkout staging
          # Merge the development branch
          git merge origin/development --no-ff -m "Auto-merge development to staging after successful tests"
          # Push to staging
          git push origin staging

      - name: Notify promotion success
        run: |
          echo "âœ… Successfully promoted development to staging branch!"
          echo "Commit SHA: ${{ github.sha }}"
          echo "All tests passed and code is now available in staging"

  # Production deployment job
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: basic-tests
    # Only run when pushing to main branch
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: sulkhan16/my-app
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64 # Multi-platform build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker gcr.io

      - name: Tag and push to GCR
        run: |
          docker tag sulkhan16/my-app:latest gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:latest
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy my-app \
            --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-app:latest \
            --region=us-central1 \
            --platform=managed \
            --allow-unauthenticated \
            --quiet
